#!/usr/bin/env python3
"""
SCRIPT DE PRUEBA Y DEMOSTRACI√ìN
SISTEMA BOG_SINTE MEJORADO

Este script demuestra las nuevas funcionalidades del sistema,
incluyendo el an√°lisis de centros de salud y accesibilidad.

Autor: Sistema de An√°lisis Demogr√°fico
Fecha: Mayo 2025
"""

import os
import sys
import time
from datetime import datetime

def verificar_archivos_necesarios():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    
    print("üîç VERIFICANDO ARCHIVOS DEL PROYECTO...")
    print("="*50)
    
    archivos_necesarios = [
        'main_corregido.py',
        'generador_datos_sinteticos_bogota.py', 
        'validador_datos_sinteticos.py',
        'analizador_centros_salud.py',
        'centros_salud.csv',
        'README.md'
    ]
    
    archivos_faltantes = []
    archivos_presentes = []
    
    for archivo in archivos_necesarios:
        if os.path.exists(archivo):
            tama√±o = os.path.getsize(archivo) / 1024  # KB
            archivos_presentes.append(f"‚úÖ {archivo} ({tama√±o:.1f} KB)")
        else:
            archivos_faltantes.append(f"‚ùå {archivo}")
    
    print("üìÑ ARCHIVOS PRESENTES:")
    for archivo in archivos_presentes:
        print(f"   {archivo}")
    
    if archivos_faltantes:
        print(f"\n‚ö†Ô∏è ARCHIVOS FALTANTES:")
        for archivo in archivos_faltantes:
            print(f"   {archivo}")
        return False
    
    print(f"\n‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def ejecutar_prueba_rapida():
    """Ejecuta una prueba r√°pida del sistema"""
    
    print(f"\nüöÄ INICIANDO PRUEBA R√ÅPIDA DEL SISTEMA")
    print("="*50)
    
    try:
        # Importar sistema principal
        print("üì¶ Importando m√≥dulos...")
        from main_corregido import SistemaDatosSinteticosBogota
        
        # Crear instancia
        print("üîß Creando instancia del sistema...")
        sistema = SistemaDatosSinteticosBogota()
        
        # Ejecutar con muestra peque√±a para prueba
        print("‚ö° Ejecutando an√°lisis con muestra peque√±a (1000 registros)...")
        inicio = time.time()
        
        exito = sistema.ejecutar_pipeline_completo(tama√±o_muestra=1000)
        
        tiempo_total = time.time() - inicio
        
        if exito:
            print(f"\nüéâ PRUEBA COMPLETADA EXITOSAMENTE")
            print(f"‚è±Ô∏è Tiempo total: {tiempo_total:.1f} segundos")
            
            # Verificar archivos generados
            directorio = "resultados_analisis_bogota"
            if os.path.exists(directorio):
                archivos_generados = os.listdir(directorio)
                print(f"\nüìÅ Archivos generados en {directorio}:")
                for archivo in sorted(archivos_generados):
                    ruta = os.path.join(directorio, archivo)
                    tama√±o = os.path.getsize(ruta) / 1024  # KB
                    print(f"   ‚Ä¢ {archivo} ({tama√±o:.1f} KB)")
            
            return True
        else:
            print(f"\n‚ùå La prueba fall√≥")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {str(e)}")
        return False

def ejecutar_prueba_centros_salud():
    """Ejecuta una prueba espec√≠fica del an√°lisis de centros de salud"""
    
    print(f"\nüè• PRUEBA ESPEC√çFICA: AN√ÅLISIS DE CENTROS DE SALUD")
    print("="*60)
    
    try:
        # Verificar datos de poblaci√≥n
        archivos_poblacion = [
            'resultados_analisis_bogota/poblacion_sintetica_bogota.csv',
            'poblacion_sintetica_bogota.csv'
        ]
        
        archivo_poblacion = None
        for archivo in archivos_poblacion:
            if os.path.exists(archivo):
                archivo_poblacion = archivo
                break
        
        if not archivo_poblacion:
            print("‚ö†Ô∏è No se encontraron datos de poblaci√≥n")
            print("üí° Ejecuta primero una prueba completa")
            return False
        
        print(f"‚úÖ Usando archivo de poblaci√≥n: {archivo_poblacion}")
        
        # Importar m√≥dulo de centros de salud
        from analizador_centros_salud import SistemaAccesibilidadSalud
        
        # Crear sistema
        sistema_acceso = SistemaAccesibilidadSalud(archivo_poblacion, 'centros_salud.csv')
        
        # Ejecutar an√°lisis
        print("üîç Ejecutando an√°lisis de accesibilidad...")
        inicio = time.time()
        
        resultados = sistema_acceso.ejecutar_analisis_completo(muestra_poblacion=500)
        
        tiempo = time.time() - inicio
        
        if resultados:
            print(f"\n‚úÖ AN√ÅLISIS DE CENTROS DE SALUD COMPLETADO")
            print(f"‚è±Ô∏è Tiempo: {tiempo:.1f} segundos")
            
            # Mostrar m√©tricas clave
            if 'metricas' in resultados:
                metricas = resultados['metricas']
                print(f"\nüìä M√âTRICAS CLAVE:")
                print(f"   ‚Ä¢ Distancia promedio: {metricas['distancia_promedio']:.2f} km")
                print(f"   ‚Ä¢ Distancia mediana: {metricas['distancia_mediana']:.2f} km")
                print(f"   ‚Ä¢ % con centro en su localidad: {metricas['pct_misma_localidad']:.1f}%")
            
            return True
        else:
            print(f"\n‚ùå El an√°lisis de centros de salud fall√≥")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Error en an√°lisis de centros: {str(e)}")
        return False

def mostrar_resumen_mejoras():
    """Muestra un resumen de las mejoras implementadas"""
    
    print(f"\nüåü RESUMEN DE MEJORAS IMPLEMENTADAS")
    print("="*50)
    
    mejoras = [
        "üè• An√°lisis completo de centros de salud",
        "üìç C√°lculo de distancias y accesibilidad",
        "üìä M√©tricas de cobertura sanitaria",
        "üë• An√°lisis de grupos vulnerables",
        "üó∫Ô∏è Visualizaciones de accesibilidad",
        "üìã Reportes especializados",
        "üîß C√≥digo modular y organizado",
        "üßπ Eliminaci√≥n de archivos duplicados",
        "üìñ Documentaci√≥n completa",
        "‚ö° Pipeline automatizado"
    ]
    
    for mejora in mejoras:
        print(f"   ‚úÖ {mejora}")
    
    print(f"\nüéØ CASOS DE USO PRINCIPALES:")
    casos_uso = [
        "Planificaci√≥n urbana y servicios p√∫blicos",
        "An√°lisis de accesibilidad sanitaria", 
        "Optimizaci√≥n de ubicaci√≥n de centros",
        "Identificaci√≥n de zonas vulnerables",
        "Evaluaci√≥n de pol√≠ticas p√∫blicas",
        "Investigaci√≥n acad√©mica",
        "Desarrollo de aplicaciones"
    ]
    
    for caso in casos_uso:
        print(f"   ‚Ä¢ {caso}")

def main():
    """Funci√≥n principal del script de prueba"""
    
    print("üß™ SCRIPT DE PRUEBA - SISTEMA BOG_SINTE MEJORADO")
    print("="*70)
    print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*70)
    
    # Paso 1: Verificar archivos
    if not verificar_archivos_necesarios():
        print("\n‚ùå Faltan archivos necesarios. Verifica la instalaci√≥n.")
        return False
    
    # Paso 2: Mostrar resumen de mejoras
    mostrar_resumen_mejoras()
    
    # Paso 3: Configuraci√≥n autom√°tica de pruebas
    print(f"\nüöÄ CONFIGURACI√ìN AUTOM√ÅTICA DE PRUEBAS")
    print("   Ejecutando: Prueba r√°pida completa (1000 registros)")
    print("   Tiempo estimado: ~1 minuto")
    print("   Para cambiar configuraci√≥n, edita el c√≥digo fuente")
    
    # Configuraci√≥n autom√°tica
    opcion = 1  # Prueba r√°pida completa por defecto
    
    exito_total = True
    
    if opcion in [1, 3]:
        # Prueba completa
        exito_completa = ejecutar_prueba_rapida()
        exito_total = exito_total and exito_completa
    
    if opcion in [2, 3]:
        # Prueba de centros de salud
        exito_centros = ejecutar_prueba_centros_salud()
        if opcion == 2:  # Solo centros
            exito_total = exito_centros
        else:  # Ambas
            exito_total = exito_total and exito_centros
    
    if opcion == 4:
        print("\nüìã Informaci√≥n mostrada. No se ejecutaron pruebas.")
        exito_total = True
    
    # Resumen final
    print(f"\n" + "="*70)
    if exito_total and opcion != 4:
        print("üéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("\n‚ú® El sistema BOG_SINTE mejorado est√° funcionando correctamente")
        print("üìÅ Revisa los archivos generados en: resultados_analisis_bogota/")
        print("\nüí° Para uso completo ejecuta: python main_corregido.py")
    elif opcion == 4:
        print("üìñ INFORMACI√ìN DEL SISTEMA MOSTRADA")
        print("\nüí° Para ejecutar el sistema completo: python main_corregido.py")
    else:
        print("‚ö†Ô∏è ALGUNAS PRUEBAS FALLARON")
        print("\nüîß Verifica las dependencias: pip install pandas numpy matplotlib seaborn")
        print("üìñ Consulta el README.md para m√°s informaci√≥n")
    
    print("="*70)
    return exito_total

if __name__ == "__main__":
    main()
