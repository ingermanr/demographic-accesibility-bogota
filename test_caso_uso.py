#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test del archivo caso_uso.py
Verifica que todas las funcionalidades est√©n funcionando correctamente
"""

import os
import sys
import pandas as pd

def verificar_dependencias():
    """Verifica que todas las dependencias necesarias est√©n instaladas"""
    dependencias_requeridas = [
        'pandas', 'numpy', 'sklearn', 'matplotlib', 'seaborn'
    ]
    
    dependencias_opcionales = [
        'plotly', 'geopy', 'geopandas'
    ]
    
    print("üîç VERIFICANDO DEPENDENCIAS...")
    print("="*50)
    
    # Verificar dependencias requeridas
    for dep in dependencias_requeridas:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} - Instalado")
        except ImportError:
            print(f"‚ùå {dep} - NO instalado (REQUERIDO)")
            return False
    
    # Verificar dependencias opcionales
    for dep in dependencias_opcionales:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} - Instalado")
        except ImportError:
            print(f"‚ö†Ô∏è  {dep} - NO instalado (opcional)")
    
    return True

def verificar_archivos():
    """Verifica que los archivos necesarios existan"""
    print("\nüìÅ VERIFICANDO ARCHIVOS...")
    print("="*50)
    
    archivos_requeridos = [
        'caso_uso.py',
        'generador_datos_sinteticos_bogota.py',
        'requirements.txt'
    ]
    
    archivos_datos = [
        'resultados_analisis_bogota/poblacion_sintetica_bogota.csv'
    ]
    
    # Verificar archivos del sistema
    for archivo in archivos_requeridos:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo} - Encontrado")
        else:
            print(f"‚ùå {archivo} - NO encontrado")
            return False
    
    # Verificar archivos de datos
    datos_disponibles = False
    for archivo in archivos_datos:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo} - Encontrado")
            datos_disponibles = True
        else:
            print(f"‚ö†Ô∏è  {archivo} - NO encontrado (se puede generar)")
    
    return True, datos_disponibles

def test_importacion_caso_uso():
    """Prueba que se pueda importar el m√≥dulo caso_uso correctamente"""
    print("\nüß™ PROBANDO IMPORTACI√ìN DE CASO_USO...")
    print("="*50)
    
    try:
        from caso_uso import CasosUsoEspecificos, ejecutar_casos_uso_completos
        print("‚úÖ Importaci√≥n exitosa")
        print(f"‚úÖ Clase CasosUsoEspecificos disponible")
        print(f"‚úÖ Funci√≥n ejecutar_casos_uso_completos disponible")
        return True
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_datos_sinteticos():
    """Verifica si existen datos sint√©ticos o genera una muestra peque√±a"""
    print("\nüìä VERIFICANDO DATOS SINT√âTICOS...")
    print("="*50)
    
    archivo_datos = 'resultados_analisis_bogota/poblacion_sintetica_bogota.csv'
    
    if os.path.exists(archivo_datos):
        try:
            df = pd.read_csv(archivo_datos)
            print(f"‚úÖ Datos encontrados: {len(df):,} registros")
            print(f"‚úÖ Columnas: {list(df.columns)}")
            return True, archivo_datos
        except Exception as e:
            print(f"‚ùå Error leyendo datos: {e}")
            return False, None
    else:
        print("‚ö†Ô∏è  No se encontraron datos sint√©ticos")
        print("üí° Ejecuta 'python main_corregido.py' para generar datos")
        return False, None

def test_caso_uso_basico():
    """Prueba b√°sica del sistema de casos de uso"""
    print("\nüéØ PROBANDO CASOS DE USO B√ÅSICOS...")
    print("="*50)
    
    # Verificar datos
    datos_ok, archivo_datos = test_datos_sinteticos()
    if not datos_ok:
        print("‚ö†Ô∏è  No se pueden probar casos de uso sin datos")
        return False
    
    try:
        from caso_uso import CasosUsoEspecificos
        
        # Crear instancia
        casos_uso = CasosUsoEspecificos(archivo_datos)
        print(f"‚úÖ Instancia creada con {len(casos_uso.df):,} registros")
        
        # Probar m√©todo de dashboard ejecutivo (el m√°s simple)
        print("üîÑ Probando dashboard ejecutivo...")
        dashboard = casos_uso.generar_dashboard_ejecutivo()
        print("‚úÖ Dashboard ejecutivo generado correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba b√°sica: {e}")
        return False

def main():
    """Funci√≥n principal de testing"""
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA CASO_USO")
    print("="*60)
    
    # Cambiar al direct√≥rio del proyecto
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(script_dir)
    
    resultados = []
    
    # 1. Verificar dependencias
    resultados.append(("Dependencias", verificar_dependencias()))
    
    # 2. Verificar archivos
    archivos_ok, datos_disponibles = verificar_archivos()
    resultados.append(("Archivos", archivos_ok))
    
    # 3. Probar importaci√≥n
    resultados.append(("Importaci√≥n", test_importacion_caso_uso()))
    
    # 4. Probar caso de uso b√°sico (si hay datos)
    if datos_disponibles:
        resultados.append(("Caso de uso b√°sico", test_caso_uso_basico()))
    
    # Resumen final
    print("\nüìã RESUMEN DE PRUEBAS")
    print("="*60)
    
    todas_ok = True
    for nombre, resultado in resultados:
        status = "‚úÖ PAS√ì" if resultado else "‚ùå FALL√ì"
        print(f"{nombre:<20}: {status}")
        if not resultado:
            todas_ok = False
    
    print("\n" + "="*60)
    if todas_ok:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("‚úÖ El archivo caso_uso.py est√° funcionando correctamente")
        if datos_disponibles:
            print("üí° Puedes ejecutar: python -c \"from caso_uso import ejecutar_casos_uso_completos; ejecutar_casos_uso_completos()\"")
        else:
            print("üí° Primero genera datos con: python main_corregido.py")
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron")
        print("üí° Revisa los errores anteriores y las dependencias")
    
    return todas_ok

if __name__ == "__main__":
    exito = main()
    sys.exit(0 if exito else 1)
