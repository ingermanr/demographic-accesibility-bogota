#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para ejecutar la integraci√≥n de centros de salud con el mapa de Bogot√°
VERSI√ìN CORREGIDA - Maneja autom√°ticamente problemas de codificaci√≥n UTF-8/Latin-1
"""

import os
import sys
from datetime import datetime

def instalar_dependencia_si_falta(paquete, nombre_import=None):
    """Instala una dependencia si no est√° disponible"""
    if nombre_import is None:
        nombre_import = paquete
    
    try:
        __import__(nombre_import)
        return True
    except ImportError:
        print(f"üì¶ Instalando {paquete}...")
        try:
            import subprocess
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', paquete])
            print(f"‚úÖ {paquete} instalado correctamente")
            return True
        except Exception as e:
            print(f"‚ùå Error instalando {paquete}: {e}")
            return False

def main():
    print("üöÄ INTEGRADOR DE CENTROS DE SALUD - VERSI√ìN CORREGIDA")
    print("=" * 60)
    print("üîß Con detecci√≥n autom√°tica de codificaci√≥n")
    print()
    
    # Verificar e instalar dependencias autom√°ticamente
    print("üì¶ VERIFICANDO DEPENDENCIAS...")
    dependencias = [
        ('pandas', 'pandas'),
        ('folium', 'folium'),
        ('geopy', 'geopy'),
        ('numpy', 'numpy'),
        ('chardet', 'chardet')  # Para detecci√≥n de codificaci√≥n
    ]
    
    dependencias_ok = True
    for paquete, import_name in dependencias:
        if instalar_dependencia_si_falta(paquete, import_name):
            print(f"   ‚úÖ {paquete}")
        else:
            print(f"   ‚ùå {paquete} - NO SE PUDO INSTALAR")
            dependencias_ok = False
    
    if not dependencias_ok:
        print("\n‚ùå No se pudieron instalar todas las dependencias.")
        print("üí° Intenta instalar manualmente:")
        print("   pip install pandas folium geopy numpy chardet")
        return False
    
    # Verificar archivos disponibles
    print(f"\nüìÅ VERIFICANDO ARCHIVOS...")
    
    archivos_encontrados = []
    archivos_faltantes = []
    
    # Archivo principal (requerido)
    archivo_centros = "centros_salud.csv"
    if os.path.exists(archivo_centros):
        size_kb = os.path.getsize(archivo_centros) / 1024
        archivos_encontrados.append(f"‚úÖ {archivo_centros} ({size_kb:.1f} KB)")
    else:
        archivos_faltantes.append(f"‚ùå {archivo_centros} (REQUERIDO)")
    
    # Archivos opcionales
    archivo_poblacion_csv = "resultados_analisis_bogota/poblacion_sintetica_bogota.csv"
    if os.path.exists(archivo_poblacion_csv):
        size_mb = os.path.getsize(archivo_poblacion_csv) / (1024 * 1024)
        archivos_encontrados.append(f"‚úÖ {archivo_poblacion_csv} ({size_mb:.1f} MB)")
    else:
        archivos_faltantes.append(f"‚ö†Ô∏è  {archivo_poblacion_csv} (opcional)")
    
    archivo_poblacion_html = "mapa_poblacion_bogota.html"
    if os.path.exists(archivo_poblacion_html):
        size_mb = os.path.getsize(archivo_poblacion_html) / (1024 * 1024)
        archivos_encontrados.append(f"‚úÖ {archivo_poblacion_html} ({size_mb:.1f} MB)")
    else:
        archivos_faltantes.append(f"‚ö†Ô∏è  {archivo_poblacion_html} (opcional)")
    
    # Mostrar estado de archivos
    print("   ARCHIVOS ENCONTRADOS:")
    for archivo in archivos_encontrados:
        print(f"     {archivo}")
    print("   ARCHIVOS FALTANTES:")
    for archivo in archivos_faltantes:
        print(f"     {archivo}")
    
    # Si falta el archivo principal, no continuar
    if not os.path.exists(archivo_centros):
        print(f"\n‚ùå ERROR: No se encontr√≥ el archivo principal '{archivo_centros}'")
        print("üí° SOLUCI√ìN:")
        print("   1. Aseg√∫rate de que el archivo est√© en el directorio actual")
        print("   2. Verifica que el nombre sea exactamente 'centros_salud.csv'")
        print("   3. Si el archivo tiene otro nombre, ren√≥mbralo o modifica el script")
        return False
    
    # Importar el integrador con la nueva versi√≥n
    try:
        from integrador_centros_salud_v2 import IntegradorCentrosSaludBogota
        print(f"\n‚úÖ Integrador cargado correctamente (versi√≥n corregida)")
    except ImportError:
        print(f"\n‚ùå No se pudo importar el integrador")
        print("üí° Aseg√∫rate de que 'integrador_centros_salud_v2.py' est√© en el directorio")
        return False
    
    print(f"\nüîÑ INICIANDO PROCESAMIENTO...")
    
    # Crear instancia del integrador
    integrador = IntegradorCentrosSaludBogota()
    
    # Ejecutar integraci√≥n
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        archivo_salida = f"mapa_centros_salud_bogota_{timestamp}.html"
        
        mapa, datos = integrador.ejecutar_integracion(
            archivo_centros_csv=archivo_centros,
            archivo_poblacion_csv=archivo_poblacion_csv if os.path.exists(archivo_poblacion_csv) else None,
            archivo_poblacion_html=archivo_poblacion_html if os.path.exists(archivo_poblacion_html) else None,
            archivo_salida=archivo_salida
        )
        
        print("\n" + "=" * 60)
        print("üéâ ¬°INTEGRACI√ìN COMPLETADA!")
        print("=" * 60)
        
        # Verificar archivos generados
        archivos_generados = []
        if os.path.exists(archivo_salida):
            size_mb = os.path.getsize(archivo_salida) / (1024 * 1024)
            archivos_generados.append(f"üó∫Ô∏è  {archivo_salida} ({size_mb:.2f} MB)")
        
        archivo_datos = archivo_salida.replace('.html', '_datos.csv')
        if os.path.exists(archivo_datos):
            size_kb = os.path.getsize(archivo_datos) / 1024
            archivos_generados.append(f"üìä {archivo_datos} ({size_kb:.1f} KB)")
        
        print(f"üìÑ ARCHIVOS GENERADOS:")
        for archivo in archivos_generados:
            print(f"   {archivo}")
        
        # Estad√≠sticas finales
        print(f"\nüìà ESTAD√çSTICAS FINALES:")
        print(f"   ‚Ä¢ Total centros mapeados: {len(datos)}")
        
        if 'localidad_normalizada' in datos.columns:
            print(f"   ‚Ä¢ Localidades cubiertas: {datos['localidad_normalizada'].nunique()}")
            print(f"   ‚Ä¢ Top 3 localidades:")
            top_localidades = datos['localidad_normalizada'].value_counts().head(3)
            for loc, count in top_localidades.items():
                print(f"     - {loc}: {count} centros")
        
        # Contar por tipo
        hospitales = len(datos[datos['centro_salud'].str.contains('HOSPITAL', na=False, case=False)])
        unidades = len(datos[datos['centro_salud'].str.contains('UNIDAD', na=False, case=False)])
        centros = len(datos) - hospitales - unidades
        
        print(f"   ‚Ä¢ Hospitales: {hospitales}")
        print(f"   ‚Ä¢ Centros de Salud: {centros}")
        print(f"   ‚Ä¢ Unidades de Servicios: {unidades}")
        
        print(f"\nüí° INSTRUCCIONES:")
        print(f"   1. Abre '{archivo_salida}' en tu navegador web")
        print(f"   2. Usa las casillas en la esquina superior derecha para activar/desactivar capas")
        print(f"   3. Haz clic en los marcadores para ver informaci√≥n detallada")
        print(f"   4. Los colores representan:")
        print(f"      üî¥ Rojos = Hospitales")
        print(f"      üîµ Azules = Centros de Salud") 
        print(f"      üü¢ Verdes = Unidades de Servicios")
        print(f"      üå°Ô∏è Mapa de calor = Densidad Poblacional")
        
        print(f"\nüéØ PROBLEMAS RESUELTOS EN ESTA VERSI√ìN:")
        print(f"   ‚úÖ Detecci√≥n autom√°tica de codificaci√≥n UTF-8/Latin-1")
        print(f"   ‚úÖ Manejo de caracteres especiales (√±, √≥, √≠, etc.)")
        print(f"   ‚úÖ Normalizaci√≥n autom√°tica de nombres de localidades")
        print(f"   ‚úÖ Instalaci√≥n autom√°tica de dependencias faltantes")
        print(f"   ‚úÖ Verificaci√≥n de archivos y tama√±os")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR durante la integraci√≥n:")
        print(f"   {str(e)}")
        
        # Diagn√≥stico adicional
        print(f"\nüîß DIAGN√ìSTICO:")
        if "'utf-8' codec can't decode" in str(e):
            print(f"   ‚Ä¢ Problema de codificaci√≥n - usando detecci√≥n autom√°tica")
        elif "No such file" in str(e):
            print(f"   ‚Ä¢ Archivo no encontrado - verifica la ruta")
        elif "Permission denied" in str(e):
            print(f"   ‚Ä¢ Sin permisos de escritura - ejecuta como administrador")
        else:
            print(f"   ‚Ä¢ Error inesperado - revisa los detalles arriba")
        
        print(f"\nüí° SOLUCIONES:")
        print(f"   ‚Ä¢ Si es problema de codificaci√≥n: El script deber√≠a manejarlo autom√°ticamente")
        print(f"   ‚Ä¢ Si faltan archivos: Verifica que centros_salud.csv exista")
        print(f"   ‚Ä¢ Si faltan permisos: Ejecuta desde un directorio con permisos de escritura")
        print(f"   ‚Ä¢ Si persiste el error: Copia el mensaje completo para an√°lisis")
        
        return False

if __name__ == "__main__":
    exito = main()
    
    if exito:
        print(f"\n‚ú® ¬°PROCESO COMPLETADO CON √âXITO!")
        print(f"Tu mapa interactivo est√° listo para usar.")
    else:
        print(f"\n‚ö†Ô∏è  El proceso no se pudo completar.")
        print(f"Revisa los mensajes de error y soluciones sugeridas arriba.")
    
    input(f"\nPresiona ENTER para salir...")
